# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'demo2.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.Qt import *
from final_version import run_detection


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        self.MainWindow = MainWindow
        self.MainWindow.setObjectName("self.MainWindow")
        self.MainWindow.resize(900, 600)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.MainWindow.sizePolicy().hasHeightForWidth())
        self.MainWindow.setSizePolicy(sizePolicy)
        self.MainWindow.setStyleSheet("")
        self.centralwidget = QtWidgets.QWidget(self.MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(270, 70, 361, 71))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label.sizePolicy().hasHeightForWidth())
        self.label.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("华文彩云")
        font.setPointSize(26)
        font.setBold(True)
        font.setItalic(False)
        font.setUnderline(False)
        font.setWeight(75)
        font.setKerning(True)
        self.label.setFont(font)
        self.label.setObjectName("label")
        self.output_list = QtWidgets.QTextBrowser(self.centralwidget)
        self.output_list.setGeometry(QtCore.QRect(220, 290, 491, 241))
        self.output_list.setObjectName("output_list")
        self.open_note = QtWidgets.QFrame(self.centralwidget)
        self.open_note.setGeometry(QtCore.QRect(300, 150, 281, 111))
        self.open_note.setObjectName("open_note")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.open_note)
        self.verticalLayout.setObjectName("verticalLayout")
        self.label_2 = QtWidgets.QLabel(self.open_note)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_2.sizePolicy().hasHeightForWidth())
        self.label_2.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("楷体")
        font.setPointSize(12)
        self.label_2.setFont(font)
        self.label_2.setObjectName("label_2")
        self.verticalLayout.addWidget(self.label_2)
        self.tiff_dir = QtWidgets.QLineEdit(self.open_note)
        self.tiff_dir.setObjectName("tiff_dir")
        self.verticalLayout.addWidget(self.tiff_dir)
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setSpacing(20)
        self.horizontalLayout.setObjectName("horizontalLayout")

        # 创建打开按钮
        self.open_dir_button = QtWidgets.QPushButton(self.open_note)
        # 关联打开系列函数槽
        self.open_dir_button.clicked.connect(self.open_button_slot)  # 这里函数不能加括号

        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.open_dir_button.sizePolicy().hasHeightForWidth())
        self.open_dir_button.setSizePolicy(sizePolicy)
        self.open_dir_button.setObjectName("open_dir_button")
        self.horizontalLayout.addWidget(self.open_dir_button)

        # 创建运行按钮
        self.run_button = QtWidgets.QPushButton(self.open_note)
        # 关联运行函数槽
        self.run_button.clicked.connect(self.run_button_slot)

        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.run_button.sizePolicy().hasHeightForWidth())
        self.run_button.setSizePolicy(sizePolicy)
        self.run_button.setObjectName("run_button")
        self.horizontalLayout.addWidget(self.run_button)
        self.verticalLayout.addLayout(self.horizontalLayout)
        self.MainWindow.setCentralWidget(self.centralwidget)
        self.statusBar = QtWidgets.QStatusBar(self.MainWindow)
        self.statusBar.setObjectName("statusBar")
        self.MainWindow.setStatusBar(self.statusBar)

        self.retranslateUi()
        QtCore.QMetaObject.connectSlotsByName(self.MainWindow)

        return self.MainWindow

    def retranslateUi(self):
        _translate = QtCore.QCoreApplication.translate
        self.MainWindow.setWindowTitle(_translate("self.MainWindow", "遥感影像车辆检测"))
        self.label.setText(_translate("self.MainWindow", "遥感影像车辆检测"))
        self.label_2.setText(_translate("self.MainWindow", "请选择遥感影像："))
        self.open_dir_button.setText(_translate("self.MainWindow", "打开..."))
        self.run_button.setText(_translate("self.MainWindow", "运行"))
        # 将标题移动到水平居中
        self.label.move((self.MainWindow.width() - self.label.width()) / 2, self.label.y())
        # 将“请选择遥感影像”移至水平居中
        self.open_note.move((self.MainWindow.width() - self.open_note.width()) / 2, self.open_note.y())
        # 将输出结果移动到水平居中
        self.output_list.move((self.MainWindow.width() - self.output_list.width()) / 2, self.output_list.y())

        palette = QPalette()
        bkg = QPixmap("../qt/imgs/bkg.jpg")
        # 让背景图片随窗口缩放
        bkg = bkg.scaled(self.MainWindow.width(), self.MainWindow.height())
        palette.setBrush(QPalette.Background, QBrush(bkg))
        self.MainWindow.setPalette(palette)

    def open_button_slot(self):
        """打开遥感影像"""
        print('open file')

        fname = QFileDialog.getOpenFileName(self.MainWindow, 'Open File', './', 'Tif file(*.tif *.tiff)')
        if fname[0]:
            tif_path = fname[0]
            print(tif_path)
            self.tiff_dir.setText(tif_path)
        else:
            pass

    def run_button_slot(self):
        """运行程序"""

        # 设置按钮为不可用
        self.run_button.setEnabled(False)
        self.open_dir_button.setEnabled(False)
        # 每次运行添加横杠分割
        self.output_list.append("------------------------\n")
        # 创建子线程
        self.run_thread = RunThread(self.tiff_dir.text())
        # 子线程信号挂到写进程的函数上
        self.run_thread.msg.connect(self.write_process)
        self.run_thread.recover_buttons.connect(self.recover_buttons)
        self.run_thread.start()

    def write_process(self, str):
        """
        逐行写入当前进度
        """
        cursor = self.output_list.textCursor()
        cursor.movePosition(QtGui.QTextCursor.End)
        cursor.insertText(str)
        self.output_list.setTextCursor(cursor)
        self.output_list.ensureCursorVisible()

    def recover_buttons(self):
        """
        恢复按钮
        """
        self.open_dir_button.setEnabled(True)
        self.run_button.setEnabled(True)


class RunThread(QThread):
    """
    定义一个子线程用于处理遥感图像
    """
    msg = pyqtSignal(str)
    recover_buttons = pyqtSignal()

    def __init__(self, tif_path):
        super(RunThread, self).__init__()
        self.tif_path = tif_path

    def run(self):
        for i in run_detection(self.tif_path):
            self.msg.emit(i)
        self.recover_buttons.emit()
